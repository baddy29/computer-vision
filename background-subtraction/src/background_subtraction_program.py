# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CO9s1Lk8Gl2_TQmB_k017RWOgl0b_5tC
"""

import os
import cv2
import numpy as np

class BGSubModel:
    """Background subtraction model using single Gaussian distribution per pixel."""

    def __init__(self, first_frame, alpha, tm):
        """Initialize the background subtraction model.

        Args:
            first_frame (np.ndarray): The initial background image.
            alpha (float): Learning rate for background model update.
            tm (float): Threshold value for foreground classification.
        """
        self.mean = np.float32(first_frame)
        self.var = np.ones(first_frame.shape, dtype=np.float32)*8
        self.alpha = alpha
        self.tm = tm

    def classify(self, current_frame):
        """Classify pixels in the current frame as background or foreground.

        Args:
            current_frame (np.ndarray): The current frame to classify.

        Returns:
            fg_mask (np.ndarray): Binary mask indicating foreground (1) and background (0) regions.
        """
        diff = np.abs(current_frame - self.mean)
        fg_mask = diff >= (self.tm*np.sqrt(self.var))
        return fg_mask.astype(np.uint8) * 255

    def update(self, current_frame):
        """Update the background model with the current frame.

        Args:
            current_frame (np.ndarray): The current frame used for model update.
        """
        current_frame1 = current_frame.astype(float)
        self.mean = (1 - self.alpha) * self.mean + self.alpha * current_frame1
        self.var = (1 - self.alpha) * self.var + self.alpha * ((current_frame1 - self.mean)**2)

def main():
    # Parameters
    ALPHA = 0.001
    TM = 2
    # Files & Folders
    INPUT_PATH = 'sample_data/input'
    OUTPUT_PATH = 'sample_data/output'

    if not os.path.isdir(OUTPUT_PATH):
        os.mkdir(OUTPUT_PATH)

    flist = [f for f in os.listdir(INPUT_PATH) if f.endswith('.jpg')]
    flist = sorted(flist)
    n = len(flist)

    # Read the first image and initialize the model
    first_frame = cv2.imread(os.path.join(INPUT_PATH, flist[0]))
    bg_model = BGSubModel(first_frame, ALPHA, TM)

    # Main loop
    for fr in range(n):
        # Read the image
        current_frame = cv2.imread(os.path.join(INPUT_PATH, flist[fr]))

        # Classify the foreground using the model
        fg_mask = bg_model.classify(current_frame)

        # Update the model with the new image
        bg_model.update(current_frame)

        if flist[fr]=="ShopAssistant1cor0005.jpg" or  flist[fr]=="ShopAssistant1cor0100.jpg" or  flist[fr]=="ShopAssistant1cor0400.jpg":
          # Save the foreground mask
          fg_mask_fname = 'FGmask_' + flist[fr]
          fg_mask_path = os.path.join(OUTPUT_PATH, fg_mask_fname)
          cv2.imwrite(fg_mask_path, fg_mask)

          # Save the background mean image (for visualization)
          bg_mean_fname = 'BGmean_' + flist[fr]
          bg_mean_path = os.path.join(OUTPUT_PATH, bg_mean_fname)
          cv2.imwrite(bg_mean_path, bg_model.mean.astype('uint8'))

if __name__ == '__main__':
    main()